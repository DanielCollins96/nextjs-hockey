{"version":3,"file":"../pages/api/rosters/[id].js","mappings":"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","sources":["webpack://hockey/external commonjs \"@sentry/nextjs\"","webpack://hockey/external commonjs \"next/dist/compiled/next-server/pages-api.runtime.prod.js\"","webpack://hockey/./node_modules/next/dist/build/templates/helpers.js?d0a3","webpack://hockey/pages/api/rosters/[id].js","webpack://hockey/sentry-wrapper-module","webpack://hockey/?9a04","webpack://hockey/external commonjs \"pg\"","webpack://hockey/./lib/db.js","webpack://hockey/./lib/queries.js","webpack://hockey/./node_modules/next/dist/server/future/route-kind.js?3015","webpack://hockey/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js"],"sourcesContent":["module.exports = require(\"@sentry/nextjs\");","module.exports = require(\"next/dist/compiled/next-server/pages-api.runtime.prod.js\");","/**\n * Hoists a name from a module or promised module.\n *\n * @param module the module to hoist the name from\n * @param name the name to hoist\n * @returns the value on the module (or promised module)\n */ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"hoist\", {\n    enumerable: true,\n    get: function() {\n        return hoist;\n    }\n});\nfunction hoist(module, name) {\n    // If the name is available in the module, return it.\n    if (name in module) {\n        return module[name];\n    }\n    // If a property called `then` exists, assume it's a promise and\n    // return a promise that resolves to the name.\n    if (\"then\" in module && typeof module.then === \"function\") {\n        return module.then((mod)=>hoist(mod, name));\n    }\n    // If we're trying to hoise the default export, and the module is a function,\n    // return the module itself.\n    if (typeof module === \"function\" && name === \"default\") {\n        return module;\n    }\n    // Otherwise, return undefined.\n    return undefined;\n}\n\n//# sourceMappingURL=helpers.js.map","/* eslint-disable import/no-anonymous-default-export */\nimport conn from '../../../lib/db'\nimport { getRoster } from '../../../lib/queries'\n\nexport default async (req, res) => {\n    try {\n        const {id} = req.query\n\n        let result = await getRoster(id)\n\n        let rosters = result.reduce((r,curr) => {\n            (r[curr.season.slice(0,4)+'-'+curr.season.slice(6)] = r[curr.season.slice(0,4)+'-'+curr.season.slice(6)] || []).push(curr);\n            return r\n        }, {})\n\n        if (rosters) {\n        var years = Object.keys(rosters)\n        var teamName = rosters[years[0]][0]['team.name']\n        }\n\n        res.status(200).json({name: teamName, rosters, seasons: years})\n    \n    } catch(err) {\n        console.log({roster_error: err});\n        res.status(500).send({success: false})\n    }\n}","import * as serverComponentModule from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport * from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nimport * as Sentry from '@sentry/nextjs';\n\n/*\n * This file is a template for the code which will be substituted when our webpack loader handles API files in the\n * `pages/` directory.\n *\n * We use `__SENTRY_WRAPPING_TARGET_FILE__.cjs` as a placeholder for the path to the file being wrapped. Because it's not a real package,\n * this causes both TS and ESLint to complain, hence the pragma comments below.\n */\n\n\nconst userApiModule = serverComponentModule ;\n\n// Default to undefined. It's possible for Next.js users to not define any exports/handlers in an API route. If that is\n// the case Next.js will crash during runtime but the Sentry SDK should definitely not crash so we need to handle it.\nlet userProvidedHandler = undefined;\n\nif ('default' in userApiModule && typeof userApiModule.default === 'function') {\n  // Handle when user defines via ESM export: `export default myFunction;`\n  userProvidedHandler = userApiModule.default;\n} else if (typeof userApiModule === 'function') {\n  // Handle when user defines via CJS export: \"module.exports = myFunction;\"\n  userProvidedHandler = userApiModule;\n}\n\nconst origConfig = userApiModule.config || {};\n\n// Setting `externalResolver` to `true` prevents nextjs from throwing a warning in dev about API routes resolving\n// without sending a response. It's a false positive (a response is sent, but only after we flush our send queue), and\n// we throw a warning of our own to tell folks that, but it's better if we just don't have to deal with it in the first\n// place.\nconst config = {\n  ...origConfig,\n  api: {\n    ...origConfig.api,\n    externalResolver: true,\n  },\n};\n\nlet wrappedHandler = userProvidedHandler;\n\nif (wrappedHandler && undefined) {\n  wrappedHandler = Sentry.wrapApiHandlerWithSentryVercelCrons(wrappedHandler, undefined);\n}\n\nif (wrappedHandler) {\n  wrappedHandler = Sentry.wrapApiHandlerWithSentry(wrappedHandler, '/api/rosters/[id]');\n}\n\nconst wrappedHandler$1 = wrappedHandler;\n\nexport { config, wrappedHandler$1 as default };\n","import { PagesAPIRouteModule } from \"next/dist/server/future/route-modules/pages-api/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { hoist } from \"next/dist/build/templates/helpers\";\n// Import the userland code.\nimport * as userland from \"private-next-pages/api/rosters/[id].js\";\n// Re-export the handler (should be the default export).\nexport default hoist(userland, \"default\");\n// Re-export config.\nexport const config = hoist(userland, \"config\");\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesAPIRouteModule({\n    definition: {\n        kind: RouteKind.PAGES_API,\n        page: \"/api/rosters/[id]\",\n        pathname: \"/api/rosters/[id]\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland\n});\n\n//# sourceMappingURL=pages-api.js.map","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"pg\");","import {Pool} from \"pg\";\n\nconst pool = new Pool({\n  user: process.env.DB_USER,\n  password: process.env.DB_PASS,\n  host: process.env.DB_URL,\n  port: process.env.DB_PORT, // Changed from PORT which might conflict with Next.js\n  database: process.env.DB_NAME,\n  // Add some connection management settings\n  max: 30, // maximum number of clients in pool\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 8000,\n});\n\n// Add error handling\npool.on(\"error\", (err, client) => {\n  console.error(\"Unexpected error on idle client\", err);\n});\n\n// Export the pool directly\nexport default pool;\n","import pool from \"./db.js\";\n\n/**\n * Represents a player in the roster.\n * @typedef {Object} RosterPlayer\n * @property {number} id - The player's ID.\n * @property {string} fullName - The player's full name.\n * @property {string} primaryPosition - The player's primary position.\n * @property {string} seasonId - The season ID.\n * @property {string} teamName - The team name.\n * @property {string} season - The season.\n * @property {number} games - The number of games played.\n * @property {number} goals - The number of goals scored.\n * @property {number} assists - The number of assists.\n * @property {number} points - The total points.\n * @property {number} pim - Penalty minutes.\n * @property {number} plusMinus - The plus/minus rating.\n * Add more properties as needed.\n */\n\n/**\n * Get the roster for a team by ID.\n * @param {number} id - The team's ID.\n * @returns {Promise<RosterPlayer[]>} A promise that resolves to an array of RosterPlayer objects.\n */\nexport async function getRoster(id) {\n  try {\n    const stats = `\n        SELECT p.\"fullName\", p.id, p.\"primaryPosition.code\", f.\"seasonId\", ps.\"team.name\",ps.season, p.\"fullName\",\n        ps.\"stat.games\",ps.\"stat.goals\",ps.\"stat.assists\",ps.\"stat.points\", ps.\"stat.pim\", ps.\"stat.plusMinus\"\n        FROM staging1.team t\n        inner JOIN staging1.franchise f\n        ON t.id = f.\"teamId\"\n        AND \"gameTypeId\" = 2\n        INNER JOIN staging1.player_stats ps\n        ON f.\"seasonId\" = ps.\"season\"\n        AND f.\"teamId\" = ps.\"team.id\"\n        LEFT JOIN staging1.player p\n        ON p.id = ps.\"person.id\"\n        WHERE t.id = $1\n        AND p.id is not null\n        ORDER BY \"seasonId\" desc\n        -- LIMIT 1\n        `;\n\n    // console.log('rosters api getRoster');\n\n    let result = await pool.query(stats, [id]);\n    result = result.rows;\n\n    return result;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n/**\n * Represents a player's statistics for a season.\n * @typedef {Object} PlayerSeasonStats\n * @property {string} season - The season in the format \"YYYY-YY\".\n * @property {string} leagueName - The name of the league.\n * @property {number} teamId - The ID of the team.\n * @property {string} teamName - The name of the team.\n * @property {number} games - The number of games played.\n * @property {number} wins - The number of games won.\n * @property {number} losses - The number of games lost.\n * @property {number} goals - The number of goals scored.\n * @property {number} savePercentage - The save percentage.\n * @property {number} goalAgainstAverage - The goal against average.\n * @property {number} shutouts - The number of shutouts.\n * @property {number} pim - Penalty minutes.\n * @property {number} plusMinus - The plus/minus rating.\n * @property {number} points - The total points.\n * @property {number} assists - The number of assists.\n * Add more properties as needed.\n */\n\n/**\n * Get a player's statistics by their ID.\n * @param {number} id - The player's ID.\n * @param {string} position - The player's position.\n * @returns {Promise<PlayerSeasonStats[]>} A promise that resolves to an array of PlayerSeasonStats objects.\n */\nexport async function getPlayerStats(id, position) {\n  // write a function that queries the player stats database for all stats from the player id\n  // and returns the stats in an array\n  try {\n    // Define the columns to select based on position\n    const columns =\n      position !== \"Goalie\"\n        ? [\n            '\"season\"',\n            '\"league.name\"',\n            '\"team.id\"',\n            '\"team.name\"',\n            '\"stat.games\"',\n            '\"stat.goals\"',\n            '\"stat.pim\"',\n            '\"stat.plusMinus\"',\n            '\"stat.points\"',\n            '\"stat.assists\"',\n          ]\n        : [\n            '\"season\"',\n            '\"league.name\"',\n            '\"team.id\"',\n            '\"team.name\"',\n            '\"stat.games\"',\n            '\"stat.wins\"',\n            '\"stat.losses\"',\n            '\"stat.goals\"',\n            '\"stat.savePercentage\"',\n            '\"stat.goalAgainstAverage\"',\n            '\"stat.shutouts\"',\n            '\"stat.pim\"',\n            '\"stat.plusMinus\"',\n            '\"stat.points\"',\n            '\"stat.assists\"',\n          ];\n\n    // Build the base query\n    let query = `SELECT ${columns.join(\", \")}\n                 FROM staging1.player_stats_new ps\n                 WHERE ps.\"person.id\" = $1`;\n\n    // Run the query\n    let result = await pool.query(query, [id]);\n    return result.rows;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n/**\n * Get a player by ID.\n * @param {number} id - The player's ID.\n * @returns {Promise<Player|null>} A promise that resolves to a Player object or null if not found.\n */\nexport async function getPlayer(id) {\n  try {\n    const stats = `\n        SELECT p.id,\"fullName\",p.\"birthDate\",p.\"birthCountry\"\n\t\t\t ,p.\"primaryPosition.name\"\n\t\t\t ,p.\"primaryNumber\"\n\t\t\t ,p.\"currentAge\"\n\t\t\t ,ARRAY_AGG(d.\"draftYear\") AS draft_seasons,ARRAY_AGG(d.\"overallPickNumber\") AS draft_position\n        FROM staging1.player p\n        LEFT JOIN staging1.drafts d \n        ON d.\"playerId\" = p.id\n        WHERE p.id = $1\n        GROUP BY\n            p.id,\n            p.\"fullName\",\n            p.\"birthDate\",\n            p.\"birthCountry\",\n            p.\"primaryPosition.name\",\n            p.\"primaryNumber\",\n            p.\"currentAge\";\n        `;\n    let result = await pool.query(stats, [id]);\n    result = result.rows;\n    // console.log({resultTst: result});\n    return result;\n  } catch (error) {\n    console.log({tst_er: error});\n  }\n}\n\n/**\n * Get all active player IDs.\n * @returns {Promise<number[]>} A promise that resolves to an array of player IDs.\n */\nexport async function getAllPlayerIds() {\n  try {\n    const stats = `\n        SELECT DISTINCT id\n        FROM staging1.player p\n        WHERE active = true\n        LIMIT 150\n        `;\n\n    let result = await pool.query(stats);\n    result = result.rows;\n\n    return result;\n  } catch (error) {\n    console.log({tst_er: error});\n  }\n}\n\n/**\n * Represents a draft year.\n * @typedef {string} DraftYear\n */\n\n/**\n * Get all distinct draft years.\n * @returns {Promise<DraftYear[]>} A promise that resolves to an array of distinct draft years.\n */\nexport async function getAllDraftYears() {\n  try {\n    const stats = `\n        SELECT DISTINCT \"draftYear\"\n        FROM staging1.drafts\n        ORDER BY \"draftYear\" desc\n        `;\n    let result = await pool.query(stats);\n    result = result.rows;\n\n    return result;\n  } catch (error) {\n    console.log({tst_er: error});\n  }\n}\n\nexport async function getDraft(seasonId) {\n  try {\n    const sql = `\n    select \"playerId\",\"overallPickNumber\",\"pickInRound\",\"roundNumber\",\"playerName\",\"position\",\"amateurLeague\",\"amateurClubName\",\"triCode\",\"birthPlace\",\"draftedByTeamId\"\n    , SUM(\"stat.games\") as games\n    , SUM(ps.\"stat.goals\") as goals\n    , SUM(ps.\"stat.assists\") as assists\n    , SUM(\"stat.points\") as points\n    , SUM(\"stat.pim\") as pim\n    ,CASE\n        WHEN MAX(\"season\") IS NOT NULL THEN\n        CONCAT(SUBSTRING(CAST(MAX(\"season\") AS text), 1, 4), '-', SUBSTRING(CAST(MAX(\"season\") AS text), 5))\n        ELSE\n        CAST(MAX(\"season\") AS text)\n    END AS last_season\n    -- ,*\n    from staging1.drafts d\n    LEFT JOIN staging1.player_stats ps ON d.\"playerId\" = ps.\"person.id\" AND \"league.id\" = 133\n    WHERE \"draftYear\" = $1\n    GROUP BY \"playerId\",\"overallPickNumber\",\"pickInRound\",\"roundNumber\",\"playerName\",\"position\",\"amateurLeague\",\"amateurClubName\",\"triCode\",\"birthPlace\",\"draftedByTeamId\"\n    ORDER BY \"overallPickNumber\" \n\n    `;\n    let result = await pool.query(sql, [seasonId]);\n    result = result.rows;\n    return result;\n  } catch (error) {\n    console.log({tst_er: error});\n    throw error;\n  }\n}\n\nexport async function getTeams() {\n  try {\n    const sql = `\n        SELECT abbreviation, name, id\n        FROM staging1.team\n        ORDER BY name;\n        `;\n    let result = await pool.query(sql);\n    result = result.rows;\n    return result;\n  } catch (error) {\n    console.log({tst_er: error});\n  }\n  // finally {\n  //     client.release()\n  // }\n}\n\nexport async function getTeamIds() {\n  try {\n    const sql = `\n        SELECT id\n        FROM staging1.team\n        `;\n    let result = await pool.query(sql);\n    result = result.rows;\n    return result;\n  } catch (error) {\n    console.log({tst_er: error});\n  }\n}\n\nexport async function getTeamSeasons(id) {\n  try {\n    const sql = `\n        SELECT \"seasonId\", \"wins\", \"losses\", \"points\"\n        ,\"goalsAgainstPerGame\",\"goalsForPerGame\", \"regulationAndOtWins\" as \"row\"\n        , \"pointPct\", \"winsInShootout\"\n        FROM Staging1.team_season\n        WHERE \"teamId\" = $1\n        ORDER BY \"seasonId\" desc \n        LIMIT 8\n        `;\n    let result = await pool.query(sql, [id]);\n    result = result.rows;\n    return result;\n  } catch (error) {\n    console.log({tst_er: error});\n  }\n}\n\nexport async function getTeamSkaters(id) {\n  try {\n    const sql = `\nWITH combined_data AS (\n  SELECT \n    t.id, \n    sk.\"playerId\", \n    sk.season, \n    sk.\"triCode\",\n    CONCAT(sk.\"firstName\", ' ', sk.\"lastName\") AS \"fullName\",\n    SUM(CASE WHEN sk.\"gameType\" = 2 THEN sk.\"gamesPlayed\" ELSE 0 END) AS \"gamesPlayed\",\n    SUM(CASE WHEN sk.\"gameType\" = 3 THEN sk.\"gamesPlayed\" ELSE 0 END) AS \"playoffGamesPlayed\",\n    SUM(CASE WHEN sk.\"gameType\" = 2 THEN sk.\"goals\" ELSE 0 END) AS \"goals\",\n    SUM(CASE WHEN sk.\"gameType\" = 3 THEN sk.\"goals\" ELSE 0 END) AS \"playoffGoals\",\n    SUM(CASE WHEN sk.\"gameType\" = 2 THEN sk.\"assists\" ELSE 0 END) AS \"assists\",\n    SUM(CASE WHEN sk.\"gameType\" = 3 THEN sk.\"assists\" ELSE 0 END) AS \"playoffAssists\",\n    SUM(CASE WHEN sk.\"gameType\" = 2 THEN sk.\"points\" ELSE 0 END) AS \"points\",\n    SUM(CASE WHEN sk.\"gameType\" = 3 THEN sk.\"points\" ELSE 0 END) AS \"playoffPoints\",\n    SUM(CASE WHEN sk.\"gameType\" = 2 THEN sk.\"penaltyMinutes\" ELSE 0 END) AS \"penaltyMinutes\",\n    SUM(CASE WHEN sk.\"gameType\" = 3 THEN sk.\"penaltyMinutes\" ELSE 0 END) AS \"playoffPenaltyMinutes\",\n    SUM(CASE WHEN sk.\"gameType\" = 2 THEN sk.\"plusMinus\" ELSE 0 END) AS \"plusMinus\",\n    SUM(CASE WHEN sk.\"gameType\" = 3 THEN sk.\"plusMinus\" ELSE 0 END) AS \"playoffPlusMinus\",\n    sk.\"positionCode\"\n  FROM newapi.skaters sk\n  JOIN newapi.team t ON sk.\"triCode\" = t.\"triCode\"\n  WHERE t.id = $1\n  GROUP BY t.id, sk.\"playerId\", sk.season, sk.\"triCode\", sk.\"firstName\", sk.\"lastName\", sk.\"positionCode\"\n)\nSELECT DISTINCT \n  id, \n  \"playerId\", \n  season, \n  \"triCode\", \n  \"fullName\", \n  \"gamesPlayed\", \n  \"playoffGamesPlayed\",\n  \"goals\", \n  \"playoffGoals\",\n  \"assists\", \n  \"playoffAssists\",\n  \"points\",\n  \"playoffPoints\",\n  \"penaltyMinutes\", \n  \"playoffPenaltyMinutes\",\n  \"plusMinus\", \n  \"playoffPlusMinus\",\n  \"positionCode\"\nFROM combined_data;\n        `;\n    let result = await pool.query(sql, [id]);\n    result = result.rows;\n    return result;\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function getTeamGoalies(id) {\n  try {\n    const sql = `\n    WITH combined_goalie_data AS (\n  SELECT \n    t.id, \n    g.\"playerId\", \n    g.season, \n    g.\"team\", \n    CONCAT(g.\"firstName\", ' ', g.\"lastName\") AS \"fullName\",\n    SUM(CASE WHEN g.\"gameType\" = 2 THEN g.\"gamesPlayed\" ELSE 0 END) AS \"gamesPlayed\",\n    SUM(CASE WHEN g.\"gameType\" = 3 THEN g.\"gamesPlayed\" ELSE 0 END) AS \"playoffGamesPlayed\",\n    SUM(CASE WHEN g.\"gameType\" = 2 THEN g.\"goals\" ELSE 0 END) AS \"goals\",\n    SUM(CASE WHEN g.\"gameType\" = 3 THEN g.\"goals\" ELSE 0 END) AS \"playoffGoals\",\n    SUM(CASE WHEN g.\"gameType\" = 2 THEN g.\"assists\" ELSE 0 END) AS \"assists\",\n    SUM(CASE WHEN g.\"gameType\" = 3 THEN g.\"assists\" ELSE 0 END) AS \"playoffAssists\",\n    SUM(CASE WHEN g.\"gameType\" = 2 THEN g.\"points\" ELSE 0 END) AS \"points\",\n    SUM(CASE WHEN g.\"gameType\" = 3 THEN g.\"points\" ELSE 0 END) AS \"playoffPoints\",\n    SUM(CASE WHEN g.\"gameType\" = 2 THEN g.\"wins\" ELSE 0 END) AS \"wins\",\n    SUM(CASE WHEN g.\"gameType\" = 3 THEN g.\"wins\" ELSE 0 END) AS \"playoffWins\",\n    SUM(CASE WHEN g.\"gameType\" = 2 THEN g.\"losses\" ELSE 0 END) AS \"losses\",\n    SUM(CASE WHEN g.\"gameType\" = 3 THEN g.\"losses\" ELSE 0 END) AS \"playoffLosses\",\n    AVG(CASE WHEN g.\"gameType\" = 2 THEN g.\"goalsAgainstAverage\" END) AS \"goalsAgainstAverage\",\n    AVG(CASE WHEN g.\"gameType\" = 3 THEN g.\"goalsAgainstAverage\" END) AS \"playoffGoalsAgainstAverage\",\n    AVG(CASE WHEN g.\"gameType\" = 2 THEN g.\"savePercentage\" END) AS \"savePercentage\",\n    AVG(CASE WHEN g.\"gameType\" = 3 THEN g.\"savePercentage\" END) AS \"playoffSavePercentage\",\n    SUM(CASE WHEN g.\"gameType\" = 2 THEN g.\"penaltyMinutes\" ELSE 0 END) AS \"penaltyMinutes\",\n    SUM(CASE WHEN g.\"gameType\" = 3 THEN g.\"penaltyMinutes\" ELSE 0 END) AS \"playoffPenaltyMinutes\"\n  FROM newapi.goalies g\n  JOIN newapi.team t ON g.\"team\" = t.\"triCode\"\n  WHERE t.id = $1\n  GROUP BY t.id, g.\"playerId\", g.season, g.team, g.\"firstName\", g.\"lastName\"\n)\nSELECT DISTINCT \n  id, \n  \"playerId\", \n  season, \n  \"team\", \n  \"fullName\", \n  \"gamesPlayed\", \n  \"playoffGamesPlayed\",\n  \"goals\", \n  \"playoffGoals\",\n  \"assists\", \n  \"playoffAssists\",\n  \"points\",\n  \"playoffPoints\",\n  \"wins\", \n  \"playoffWins\",\n  \"losses\", \n  \"playoffLosses\",\n  \"goalsAgainstAverage\", \n  \"playoffGoalsAgainstAverage\",\n  \"savePercentage\", \n  \"playoffSavePercentage\",\n  \"penaltyMinutes\", \n  \"playoffPenaltyMinutes\"\nFROM combined_goalie_data;\n        `;\n    let result = await pool.query(sql, [id]);\n    result = result.rows;\n    return result;\n  } catch (error) {\n    // return a error code\n    console.log({tst_er: error});\n  }\n}\n\nexport async function getPlayoffYears(abbreviation) {\n  try {\n    const sql = `\n        SELECT season\n        FROM staging1.\"team.gametypes\"\n        WHERE 3 = ANY(\"gameTypes\")\n        AND abbreviation = $1\n        `;\n    let result = await pool.query(sql, [abbreviation]);\n    result = result.rows.map((row) => row.season);\n    return result;\n  } catch (error) {\n    console.log({tst_er: error});\n  }\n}\n\nexport async function getPointLeadersBySeason(season = 20222023) {\n  try {\n    const sql = `\n        SELECT     ROW_NUMBER() OVER (ORDER BY ps.\"stat.points\" DESC NULLS LAST, ps.\"stat.goals\" DESC NULLS LAST) AS row_number,\n        p.\"fullName\", p.id, p.\"primaryPosition.code\", ps.\"season\", ps.\"team.name\", ps.\"stat.goals\", ps.\"stat.games\",ps.\"stat.assists\", ps.\"stat.points\", ps.\"team.id\"\n        FROM staging1.player_stats_new ps\n        INNER JOIN staging1.player p\n        ON p.id = ps.\"person.id\" AND ps.season = $1\n        WHERE ps.\"league.id\" = 133\n        ORDER BY ps.\"stat.points\" DESC NULLS LAST,ps.\"stat.goals\" DESC NULLS LAST\n        LIMIT 200\n        `;\n    let result = await pool.query(sql, [season]);\n    result = result.rows;\n    return result;\n  } catch (error) {\n    console.log({tst_er: error});\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"RouteKind\", {\n    enumerable: true,\n    get: function() {\n        return RouteKind;\n    }\n});\nvar RouteKind;\n(function(RouteKind) {\n    /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */ RouteKind[\"PAGES\"] = \"PAGES\";\n    /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */ RouteKind[\"PAGES_API\"] = \"PAGES_API\";\n    /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */ RouteKind[\"APP_PAGE\"] = \"APP_PAGE\";\n    /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */ RouteKind[\"APP_ROUTE\"] = \"APP_ROUTE\";\n})(RouteKind || (RouteKind = {}));\n\n//# sourceMappingURL=route-kind.js.map","\"use strict\";\nif (process.env.NEXT_RUNTIME === \"edge\") {\n    module.exports = require(\"next/dist/server/future/route-modules/pages-api/module.js\");\n} else {\n    if (process.env.NODE_ENV === \"development\") {\n        module.exports = require(\"next/dist/compiled/next-server/pages-api.runtime.dev.js\");\n    } else if (process.env.TURBOPACK) {\n        module.exports = require(\"next/dist/compiled/next-server/pages-api-turbo.runtime.prod.js\");\n    } else {\n        module.exports = require(\"next/dist/compiled/next-server/pages-api.runtime.prod.js\");\n    }\n}\n\n//# sourceMappingURL=module.compiled.js.map"],"names":["module","exports","require","Object","defineProperty","enumerable","get","hoist","name","then","mod","userProvidedHandler","req","res","id","query","rosters","result","getRoster","reduce","r","curr","season","slice","push","years","keys","teamName","status","json","seasons","err","console","log","roster_error","send","success","serverComponentModule","userApiModule","default","origConfig","config","api","externalResolver","wrappedHandler","nextjs_","wrapApiHandlerWithSentry","wrappedHandler$1","next_route_loaderkind_PAGES_API_page_2Fapi_2Frosters_2F_5Bid_5D_preferredRegion_absolutePagePath_private_next_pages_2Fapi_2Frosters_2F_5Bid_5D_js_middlewareConfigBase64_e30_3D_","helpers","l","_id_namespaceObject","next_route_loaderkind_PAGES_API_page_2Fapi_2Frosters_2F_5Bid_5D_preferredRegion_absolutePagePath_private_next_pages_2Fapi_2Frosters_2F_5Bid_5D_js_middlewareConfigBase64_e30_3D_config","routeModule","module_compiled","PagesAPIRouteModule","definition","kind","route_kind","x","PAGES_API","page","pathname","bundlePath","filename","userland","pool","Pool","user","process","env","DB_USER","password","DB_PASS","host","DB_URL","port","DB_PORT","database","DB_NAME","max","idleTimeoutMillis","connectionTimeoutMillis","on","client","error","db","stats","rows","getPlayerStats","position","columns","join","getPlayer","tst_er","getAllPlayerIds","getAllDraftYears","RouteKind","__webpack_require__"],"sourceRoot":""}